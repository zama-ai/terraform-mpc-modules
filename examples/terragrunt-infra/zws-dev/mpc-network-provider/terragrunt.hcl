# ZWS-Dev Environment Configuration
# Uses local terraform.tfvars for environment-specific configuration

# Include root configuration
include "root" {
  path = find_in_parent_folders("root.hcl")
}

# Override remote state key for this specific environment
#remote_state {
#  backend = "s3"
#  config = {
#    bucket         = "zama-terraform-mpc-modules-tfstate"
#    key            = "zws-dev/mpc-network-provider/terraform.tfstate"
#    region         = "eu-west-1"
#    encrypt        = true
#  }
#}

# Generate generic providers for all child configurations
generate "providers" {
  path      = "providers.tf"
  if_exists = "overwrite"
  contents = <<EOF
# Auto-generated provider configurations
# This file is generated by Terragrunt - DO NOT EDIT MANUALLY

terraform {
  required_version = ">= 1.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = ">= 2.23"
    }
    random = {
      source  = "hashicorp/random"
      version = ">= 3.1"
    }
    kubectl = {
      source  = "gavinbunney/kubectl"
      version = "1.19.0"
    }
    helm = {
      source  = "hashicorp/helm"
      version = ">= 2.17"
    }
  }
  backend "s3" {}
}

provider "aws" {
  region = var.aws_region_for_eks != null ? var.aws_region_for_eks : var.aws_region
}

provider "kubernetes" {
  config_path    = var.kubeconfig_path
  config_context = var.kubeconfig_context
  
  dynamic "exec" {
    for_each = var.cluster_name != null ? [1] : []
    content {
      api_version = "client.authentication.k8s.io/v1beta1"
      args        = ["eks", "get-token", "--cluster-name", var.cluster_name]
      command     = "aws"
    }
  }
}
provider "helm" {
  kubernetes {
    config_path = var.kubeconfig_path
    config_context = var.kubeconfig_context
  }
}

EOF
}

# Reference the partner-provider example module with double-slash to download entire repo
terraform {
  source = "../../../..//examples/mpc-network-provider"
  
  extra_arguments "tfvars" {
    commands = get_terraform_commands_that_need_vars()
    arguments = [
      "-var-file=${get_terragrunt_dir()}/terraform.tfvars"
    ]
  }
}

# Optional: Override specific inputs for Terragrunt-managed environments
inputs = {
  # Most configuration comes from the local terraform.tfvars file
} 