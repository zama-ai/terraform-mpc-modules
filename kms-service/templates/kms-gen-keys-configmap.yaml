{{- if .Values.kmsGenKeys.enabled -}}
{{- $peersIDList := untilStep (include "kmsPeersStartID" . | int) (.Values.kmsPeers.count | add1 | int) 1  }}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: kms-core-client-gen-keys
  name: {{ include "kmsGenKeyJobName" . }}-config
data:
  core-client-gen-keys.sh: |
    #!/usr/bin/env sh
    set -ex
    echo "loading configuration from env vars into the config.toml file"

    # Process the S3 endpoint if it contains a variable
    if echo "$S3_ENDPOINT" | grep -q '\$'; then
        S3_ENDPOINT=$(eval echo "$S3_ENDPOINT")
    fi

    if [ -n "${CORE_CLIENT__S3_ENDPOINT}" ]; then
      S3_ENDPOINT="${CORE_CLIENT__S3_ENDPOINT}"
    fi

    cat <<EOF >>config.toml
    s3_endpoint="${S3_ENDPOINT}"
    object_folder=${OBJECT_FOLDER}
    core_addresses=${CORE_ADDRESSES}
    num_majority=${NUM_MAJORITY}
    num_reconstruct=${NUM_RECONSTRUCT}
    decryption_mode=${DECRYPTION_MODE}
    fhe_params=${FHE_PARAMETER:=Test}
    EOF
    if [ -n "$KMS_KEY_ID" ]; then
      echo "KMS_KEY_ID=${KMS_KEY_ID} already exists, skipping key generation"
    else
      echo "Launching new KMS key generation with config:"
      cat config.toml
      result_key_id=$(bin/kms-core-client -f config.toml {{ .Values.kmsGenKeys.keyGenArgs }})
      KMS_KEY_ID=$(echo $result_key_id | grep request_id | cut -d'"' -f4)
      if [ -z "$KMS_KEY_ID" ]; then
        echo "Error: key-gen failed. Exiting."
        exit 1
      fi
    fi
    echo $KMS_KEY_ID > /keygen/key_id
    if [ -n "$KMS_CRS_ID" ]; then
      echo "KMS_CRS_ID=${KMS_CRS_ID} already exists, skiping crs generation"
    else
      echo "Launching crs generation"
      result_crs_id=$(bin/kms-core-client -f config.toml {{ .Values.kmsGenKeys.crsGenArgs }})
      KMS_CRS_ID=$(echo $result_crs_id | grep request_id | cut -d'"' -f4)
      if [ -z "$KMS_CRS_ID" ]; then
        echo "Error: crs-gen failed. Exiting."
        exit 1
      fi
    fi
    echo $KMS_CRS_ID > /keygen/crs_id
    echo "${S3_ENDPOINT}" > /keygen/bucket_url
    echo "Retrieving previously generated keys from the KMS bucket: ${S3_ENDPOINT}"
    bin/kms-core-client -f config.toml key-gen-result --request-id "$KMS_KEY_ID"
    verf_key_id=$(ls keys/CLIENT/VerfKey/)
    if [ -z "$verf_key_id" ]; then
        echo "Client VerfKey not found. Please verify KMS initialization. Exiting."
        exit 1
    else
      echo "Client VerfKey found, retrieving KMS Signer Verif Addresses"
      {{- if .Values.kmsCore.thresholdMode.enabled }}
        {{- if .Values.kmsCore.thresholdMode.peersList }}
          {{- range $i, $peer := .Values.kmsCore.thresholdMode.peersList }}
      wget -O /keygen/kms_signer_address_{{ $peer.id }} "${S3_ENDPOINT}/PUB-p{{ $peer.id }}/VerfAddress/${verf_key_id}"
          {{- end }}
        {{- else }}
          {{ range $i := $peersIDList }}
      wget -O /keygen/kms_signer_address_{{ $i }} "${S3_ENDPOINT}/PUB-p{{ $i }}/VerfAddress/${verf_key_id}"
          {{- end }}
        {{- end }}
      {{- else }}
      wget -O /keygen/kms_signer_address_0 "${S3_ENDPOINT}/PUB/VerfAddress/${verf_key_id}"
      {{- end }}
    fi
    exit 0
  write-gen-keys-to-configmap.sh: |
    #!/usr/bin/env sh
    set -ex
    {{- if .Values.kmsGenKeys.forceRecreate }}
    echo "kmsGenKey.forceRecreate is enabled, deleting existing configmap"
    kubectl delete configmap "$CONFIGMAP_NAME"
    {{- end }}
    echo "creating kubernetes configmap: $CONFIGMAP_NAME"
    kubectl create configmap "$CONFIGMAP_NAME" \
      --from-literal=KMS_BUCKET_URL="$(cat /keygen/bucket_url)" \
      --from-literal=KMS_KEY_ID="$(cat /keygen/key_id)" \
      --from-literal=KMS_CRS_ID="$(cat /keygen/crs_id)"
      {{- if .Values.kmsCore.thresholdMode.enabled -}}
        {{- if .Values.kmsCore.thresholdMode.peersList -}}
          {{- range $i, $peer := .Values.kmsCore.thresholdMode.peersList }} \
      --from-literal=KMS_SIGNER_ADDRESS_{{ $peer.id }}="$(cat /keygen/kms_signer_address_{{ $peer.id }})"
          {{- end -}}
        {{- else -}}
          {{- range $i := $peersIDList }} \
      --from-literal=KMS_SIGNER_ADDRESS_{{ $i }}="$(cat /keygen/kms_signer_address_{{ $i }})"
          {{- end }}
        {{- end }}
      {{- else }}
      --from-literal=KMS_SIGNER_ADDRESS_0="$(cat /keygen/kms_signer_address_0)"
    {{- end }}
    {{- range $annotationKey, $annotationValue := .Values.kmsGenKeys.configmap.annotations }}
    kubectl annotate configmap "$CONFIGMAP_NAME" {{ $annotationKey }}={{ $annotationValue | quote }}
    {{- end }}
{{- end -}}
