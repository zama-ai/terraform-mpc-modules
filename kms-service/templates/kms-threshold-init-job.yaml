{{- if and .Values.kmsInit.enabled .Values.kmsCore.thresholdMode.enabled -}}
{{- $kmsCoreName := include "kmsCoreName" . }}
{{- $kmsInitName := include "kmsInitJobName" . }}
{{- $peersIDList := untilStep (include "kmsPeersStartID" . | int) (.Values.kmsPeers.count | add1 | int) 1  }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: kms-threshold-init-job
    app.kubernetes.io/name: {{ $kmsInitName }}
  annotations:
    "helm.sh/hook-weight": "0"
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
  name: {{ $kmsInitName }}
spec:
  template:
    metadata:
      labels:
        app: kms-threshold-init-job
        app.kubernetes.io/name: {{ $kmsInitName }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: check-kms-cores
          image: {{ .Values.kubeUtils.image.name }}:{{ .Values.kubeUtils.image.tag }}
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "starting init process for kms-cores to be ready to be initialized"
              kmsInitCount=0
              {{- if .Values.kmsCore.thresholdMode.peersList }}
              peerAddresses=({{ range $peer := .Values.kmsCore.thresholdMode.peersList }}{{ printf "%s:%d" $peer.host (int $.Values.kmsCore.ports.client) | quote }} {{ end }})
              for peerAddress in "${peerAddresses[@]}"; do
                while true
                  do
                  /bin/grpc_health_probe -addr="${peerAddress}"
                  healthStatus=$?
                  if [ ${healthStatus} -eq 0 ]; then
                    echo "kms-core #${peerAddress} is already initialized"
                    kmsInitCount=$((kmsInitCount + 1))
                    break
                  fi
                  if [ ${healthStatus} -eq {{ .Values.kmsPeers.count }} ]; then
                    echo "kms-core #${peerAddress} is reachable but not yet initialized"
                    break
                  fi;
                  echo "failed to connect to kms-core at ${peerAddress}, retrying"
                  sleep 1
                done
              done
              {{- else }}
              peersIDList=({{ $peersIDList | join " " }})
              for peerID in "${peersIDList[@]}"; do
                while true
                  do
                  /bin/grpc_health_probe -addr={{ printf "%s-${peerID}:%d" $kmsCoreName (int .Values.kmsCore.ports.client) | quote }}
                  healthStatus=$?
                  {{- /* Checking grpc-health-probe response codes, see https://github.com/grpc-ecosystem/grpc-health-probe?tab=readme-ov-file#exit-codes*/}}
                  if [ ${healthStatus} -eq 0 ]; then
                    echo "kms-core #${peerID} is already initialized"
                    kmsInitCount=$((kmsInitCount + 1))
                    break
                  fi
                  if [ ${healthStatus} -eq {{ .Values.kmsPeers.count }} ]; then
                    echo "kms-core #${peerID} is reachable but not yet initialized"
                    break
                  fi;
                  echo "failed to connect to kms-core #${peerID}, retrying"
                  sleep 1
                done
              done
              {{- end }}
              echo "all kms-core peers have been reached"
              echo "${kmsInitCount}" > /mnt/kms-init-count
          volumeMounts:
            - name: kms-core-health
              mountPath: /mnt
      containers:
        - name: threshold-init
          image: {{ .Values.kmsCore.image.name }}:{{ .Values.kmsCore.image.tag }}
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              kmsInitCount="$(cat /mnt/kms-init-count)"
              echo "${kmsInitCount} peers to initialize"
              bin/kms-init --addresses
              {{- if .Values.kmsCore.thresholdMode.peersList -}}
              {{ range $peer := .Values.kmsCore.thresholdMode.peersList }} {{ printf "http://%s:%d" $peer.host (int $.Values.kmsCore.ports.client) }}{{ end }}
              {{- else -}}
              {{ range $peerID := $peersIDList }} {{ printf "http://%s-%d:%d" $kmsCoreName $peerID (int $.Values.kmsCore.ports.client) }}{{ end }}
              {{- end }}
              exit 0
          volumeMounts:
            - name: kms-core-health
              mountPath: /mnt
              readOnly: true
      volumes:
        - name: kms-core-health
          emptyDir:
            medium: Memory
      restartPolicy: Never
      imagePullSecrets:
        - name: registry-credentials
      {{- with .Values.kmsInit.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kmsInit.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kmsInit.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
