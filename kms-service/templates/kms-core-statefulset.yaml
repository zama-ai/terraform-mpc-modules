{{- if .Values.kmsCore.enabled -}}
{{- $kmsCoreName := include "kmsCoreName" . }}
{{- $peersIDList := untilStep (default 1 .Values.kmsPeers.id | int) (.Values.kmsPeers.count | add1 | int) 1  }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kms-core
    app.kubernetes.io/name: {{ include "kmsCoreName" . }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/kms-core-configmap.yaml") . | sha256sum }}
  name: {{ include "kmsCoreName" . }}
spec:
  replicas: {{ .Values.kmsCore.replicas | default .Values.kmsPeers.count }}
  ordinals:
    start: {{ include "kmsPeersStartID" . }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kms-core
  serviceName: {{ include "kmsCoreName" . }}
  template:
    metadata:
      labels:
        app: kms-core
        app.kubernetes.io/name: {{ include "kmsCoreName" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/kms-core-configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
    {{- if .Values.kmsCore.nitroEnclave.enabled }}
      securityContext:
      {{- toYaml .Values.podSecurityContextForEnclave | nindent 8 }}
    {{- else }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ .Values.kmsCore.serviceAccountName }}
      subdomain: {{ include "kmsCoreName" . }}
      initContainers:
        - image: {{ .Values.kubeUtils.image.name }}:{{ .Values.kubeUtils.image.tag }}
          imagePullPolicy: {{ .Values.kubeUtils.image.pullPolicy }}
          name: kms-core-init-load-env
          command:
            - /bin/sh
          args:
            - -c
            - |
              export AWS_REGION="${AWS_REGION:={{ .Values.kmsCore.aws.region }}}"
              export AWS_ROLE_ARN="${AWS_ROLE_ARN:={{ .Values.kmsCore.aws.roleArn }}}"
              export KMS_CORE__PUBLIC_VAULT__STORAGE="${KMS_CORE__PUBLIC_VAULT__STORAGE:={{ include "kmsPublicVaultStorage" . }}}"
              export KMS_CORE__PRIVATE_VAULT__STORAGE="${KMS_CORE__PRIVATE_VAULT__STORAGE:={{ include "kmsPrivateVaultStorage" . }}}"
              {{- if .Values.kmsCore.nitroEnclave.enabled }}
              export KMS_CORE__PRIVATE_VAULT__KEYCHAIN="${KMS_CORE__PRIVATE_VAULT__KEYCHAIN:={{ .Values.kmsCore.privateVault.awskms.keychain }}}"
              {{- end }}
              envsubst < /var/lib/kms-core/config/kms-server.toml > kms-server.toml
              {{- if .Values.kmsCore.nitroEnclave.debug }}
              echo "### BEGIN - env ###"
              env
              echo "### END - env ###"
              echo "### BEGIN - kms-server.toml ###"
              cat kms-server.toml
              echo "### END - kms-server.toml ###"
              {{- end }}
          env:
            - name: KMS_CORE__THRESHOLD__MY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: NO_COLOR
              value: "true"
            - name: RUN_MODE
              value: {{ .Values.runMode }}
            - name: RUST_LOG
              value: {{ .Values.rustLog }}
          {{- if .Values.kmsCore.envFrom.configmap.name }}
          envFrom:
            - configMapRef:
                name: {{ .Values.kmsCore.envFrom.configmap.name }}
          {{- end }}
          workingDir: {{ .Values.kmsCore.workdir }}
          volumeMounts:
            - mountPath: /var/lib/kms-core/config
              name: config-files
            - mountPath: {{ .Values.kmsCore.workdir }}
              name: workdir
        {{- if .Values.kmsCore.nitroEnclave.enabled }}
        {{- /* Init Enclave Config Socket, hardcoded to 4000 in https://github.com/zama-ai/kms-core/blob/main/docker/core/service/init_enclave.sh */}}
        - {{ include "proxyFromEnclave"
               (dict "name" "enclave-config"
                     "image" .Values.kubeUtils.image
                     "vsockPort" 4000
                     "to" (printf "OPEN:kms-server.toml,rdonly")
                ) | indent 10 | trim }}
          workingDir: {{ .Values.kmsCore.workdir }}
          volumeMounts:
            - mountPath: {{ .Values.kmsCore.workdir }}
              name: workdir
        {{- /* Init Enclave Logger Socket, hardcoded to 3000 in https://github.com/zama-ai/kms-core/blob/main/docker/core/service/init_enclave.sh */}}
        - {{ include "proxyFromEnclave"
               (dict "name" "kms-core-enclave-logger"
                     "image" .Values.kubeUtils.image
                     "vsockPort" 3000
                     "to" "STDOUT"
               ) | indent 10 | trim }}
        {{- /* Init Enclave Tracing Socket */}}
        - {{ include "proxyFromEnclave"
               (dict "name" "kms-core-enclave-tracing"
                     "image" .Values.kubeUtils.image
                     "vsockPort" .Values.kmsCore.nitroEnclave.ports.tracing
                     "to" (printf "TCP:%s" (urlParse .Values.tracing.endpoint).host)
                ) | indent 10 | trim }}
        {{- if .Values.kmsCore.nitroEnclave.ports.imds }}
        {{- /* Init AWS IMDS Proxy Socket */}}
        - {{ include "proxyFromEnclaveTcp"
               (dict "name" "aws-imds-proxy"
                     "image" .Values.kubeUtils.image
                     "vsockPort" .Values.kmsCore.nitroEnclave.ports.imds
                     "address" "169.254.169.254"
                     "port" 80
                ) | indent 10 | trim }}
        {{- end }}
        {{- if .Values.kmsCore.nitroEnclave.ports.sts }}
        {{- /* Init Enclave Web Identity Token Socket, hardcoded to 4100 in https://github.com/zama-ai/kms-core/blob/main/docker/core/service/init_enclave.sh */}}
        - {{ include "proxyFromEnclave"
               (dict "name" "enclave-web-identity-token"
                     "image" .Values.kubeUtils.image
                     "vsockPort" 4100
          "to" "OPEN:/var/run/secrets/eks.amazonaws.com/serviceaccount/token,rdonly"
          ) | indent 10 | trim }}
        {{- /* Init AWS STS Proxy Socket */}}
        - {{ include "proxyFromEnclaveTcp"
               (dict "name" "aws-sts-proxy"
                     "image" .Values.kubeUtils.image
                     "vsockPort" .Values.kmsCore.nitroEnclave.ports.sts
                     "address" (printf "sts.%s.amazonaws.com" .Values.kmsCore.aws.region)
                     "port" 443
                ) | indent 10 | trim }}
        {{- end }}
        {{- /* Init AWS S3 Proxy Socket */}}
        - {{ include "proxyFromEnclaveTcp"
               (dict "name" "aws-s3-proxy"
                     "image" .Values.kubeUtils.image
                     "vsockPort" .Values.kmsCore.nitroEnclave.ports.s3
                     "address" (printf "s3.%s.amazonaws.com" .Values.kmsCore.aws.region)
                     "port" 443
                ) | indent 10 | trim }}
        {{- /* Init AWS KMS Proxy Socket */}}
        - {{ include "proxyFromEnclaveTcp"
               (dict "name" "aws-kms-proxy"
                     "image" .Values.kubeUtils.image
                     "vsockPort" .Values.kmsCore.nitroEnclave.ports.awskms
                     "address" (printf "kms.%s.amazonaws.com" .Values.kmsCore.aws.region)
                     "port" 443
                ) | indent 10 | trim }}
        {{- /* Init GRPC Client Proxy Socket */}}
        - {{ include "proxyToEnclaveTcp"
               (dict "name" "grpc-client-proxy"
                     "image" .Values.kubeUtils.image
                     "cid" .Values.kmsCore.nitroEnclave.cid
                     "port" .Values.kmsCore.ports.client
                ) | indent 10 | trim }}
        {{- /* Init Metrics Endpoint Proxy Socket */}}
        - {{ include "proxyToEnclaveTcp"
               (dict "name" "metrics-endpoint-proxy"
                     "image" .Values.kubeUtils.image
                     "cid" .Values.kmsCore.nitroEnclave.cid
                     "port" .Values.kmsCore.ports.metrics
                ) | indent 10 | trim }}
        {{- if .Values.kmsCore.thresholdMode.enabled }}
        {{- /* Init GRPC Local Peer Proxy Socket */}}
        - {{ include "proxyToEnclaveTcp"
               (dict "name" "grpc-peer-proxy"
                     "image" .Values.kubeUtils.image
                     "cid" .Values.kmsCore.nitroEnclave.cid
                     "port" .Values.kmsCore.ports.peer
                ) | indent 10 | trim }}
        {{- /* Init GRPC External Peers Proxy Sockets */}}
        {{- if .Values.kmsCore.thresholdMode.peersList }}
          {{- range .Values.kmsCore.thresholdMode.peersList }}
        - {{ include "proxyFromEnclaveTcp"
               (dict "name" (printf "enclave-peer-proxy-%d" (int .id))
                     "image" $.Values.kubeUtils.image
                     "vsockPort" (add $.Values.kmsCore.nitroEnclave.ports.peer .id)
                     "address" .host
                     "port" .port
                ) | indent 10 | trim }}
          {{- end }}
        {{- else }}
          {{- range $i := $peersIDList }}
        - {{ include "proxyFromEnclaveTcp"
               (dict "name" (printf "enclave-peer-proxy-%d" (int $i))
                     "image" $.Values.kubeUtils.image
                     "vsockPort" (add $.Values.kmsCore.nitroEnclave.ports.peer $i)
                     "address" (printf "%s-%d" $kmsCoreName (int $i))
                     "port" $.Values.kmsCore.ports.peer
                ) | indent 10 | trim }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- else }}
        {{- /* Generate init keys for non-enclave kms-core service */}}
        - image: {{ .Values.kmsCore.image.name }}:{{ .Values.kmsCore.image.tag }}
          name: kms-core-init-gen-keys
          command:
            - /bin/sh
          args:
            - -c
            - |
              kms-gen-keys --cmd signing-keys \
              {{- if .Values.minio.enabled }}
              --aws-s3-endpoint http://minio:9000 \
              {{- end }}
              --aws-region {{ .Values.kmsCore.aws.region }} \
              --pub-url "${KMS_CORE__PUBLIC_VAULT__STORAGE:={{ include "kmsPublicVaultStorage" . }}}" \
              --priv-url "${KMS_CORE__PRIVATE_VAULT__STORAGE:={{ include "kmsPrivateVaultStorage" . }}}" \
              {{- if .Values.kmsCore.privateVault.awskms.enabled }}
              --root-key-id "${KMS_CORE__PRIVATE_VAULT__KEYCHAIN:={{ .Values.kmsCore.privateVault.awskms.keychain }}}" \
              {{- end }}
              {{ include "kmsCoreMode" . }} \
              {{- if .Values.kmsCore.thresholdMode.enabled }}
              --signing-key-party-id ${KMS_CORE__THRESHOLD__MY_ID} \
              --num-parties {{ .Values.kmsPeers.count }}
              {{- else }}
              --write-privkey
              {{- end }}
          env:
            - name: KMS_CORE__THRESHOLD__MY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            {{- if .Values.minio.enabled }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ (index .Values.minio.provisioning.users 0).username}}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ (index .Values.minio.provisioning.users 0).password}}
            {{- end }}
            - name: "NO_COLOR"
              value: "true"
            - name: RUN_MODE
              value: {{ .Values.runMode }}
            - name: RUST_LOG
              value: {{ .Values.rustLog }}
          {{- if .Values.kmsCore.envFrom.configmap.name }}
          envFrom:
            - configMapRef:
                name: {{ .Values.kmsCore.envFrom.configmap.name }}
          {{- end }}
          {{- if not .Values.kmsCore.privateVault.s3.enabled }}
          volumeMounts:
            - mountPath: /keys
              name: keys
          {{- end }}
          resources:
            requests:
              memory: {{ .Values.kmsCore.resources.requests.memory }}
              cpu: {{ .Values.kmsCore.resources.requests.cpu }}
            limits:
              memory: {{ .Values.kmsCore.resources.limits.memory }}
              ephemeral-storage: {{ .Values.kmsCore.resources.limits.ephemeralStorage }}
        {{- end }}
      containers:
        - image: {{ .Values.kmsCore.image.name }}:{{ .Values.kmsCore.image.tag }}
          imagePullPolicy: {{ .Values.kmsCore.image.pullPolicy }}
          {{- if .Values.kmsCore.nitroEnclave.enabled }}
          name: kms-core-enclave
          command:
            - /bin/sh
          args:
            - -c
            - |
              {{- if .Values.kmsCore.nitroEnclave.debug }}
              echo "### BEGIN - enclave.json ###"
              cat /var/lib/kms-core/config/enclave.json
              echo "### END - enclave.json ###"
              echo "### BEGIN - describe-eif ###"
              nitro-cli describe-eif --eif-path {{ .Values.kmsCore.nitroEnclave.eifPath }}
              echo "### END - describe-eif ###"
              {{- end }}
              {{- if and .Values.kmsCore.thresholdMode.tls.enabled .Values.kmsCore.thresholdMode.tls.attested }}
              nitro-cli sign-eif --eif-path {{ .Values.kmsCore.nitroEnclave.eifPath }} --signing-certificate /var/lib/kms-core/config/party_cert.pem --private-key {{ .Values.kmsCore.nitroEnclave.eifSignKey }}
              {{- end }}
              nitro-cli run-enclave --config /var/lib/kms-core/config/enclave.json
              while true; do
                nitro-cli describe-enclaves > /var/log/nitro_enclaves/status
                sleep 60
              done
          {{- else }}
          name: kms-core
          command:
            - /bin/sh
          args:
            - -c
            - |
              {{- if .Values.minio.enabled }}
              mkdir -p ~/.aws/
              echo '[default]' > ~/.aws/credentials
              echo 'aws_access_key_id = ${AWS_ACCESS_KEY_ID}' >> ~/.aws/credentials
              echo 'aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}' >> ~/.aws/credentials
              {{- end }}
              kms-server --config-file=kms-server.toml
          {{- end }}
          env:
            {{- if .Values.kmsCore.thresholdMode.enabled }}
            - name: KMS_CORE__THRESHOLD__MY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            {{- end }}
            - name: "NO_COLOR"
              value: "true"
            - name: RUN_MODE
              value: {{ .Values.runMode }}
            - name: RUST_LOG
              value: {{ .Values.rustLog }}
            {{- if .Values.minio.enabled }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ (index .Values.minio.provisioning.users 0).username}}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ (index .Values.minio.provisioning.users 0).password}}
            {{- end }}
          {{- if .Values.kmsCore.envFrom.configmap.name }}
          envFrom:
            - configMapRef:
                name: {{ .Values.kmsCore.envFrom.configmap.name }}
          {{- end }}
          workingDir: {{ .Values.kmsCore.workdir }}
          volumeMounts:
            - mountPath: {{ .Values.kmsCore.workdir }}
              name: workdir
            - mountPath: /var/lib/kms-core/config
              name: config-files
            {{- if not .Values.kmsCore.privateVault.s3.enabled }}
            - mountPath: /keys
              name: keys
            {{- end }}
            {{- if .Values.kmsCore.nitroEnclave.enabled }}
            - mountPath: /hugepages
              name: hugepage
            - name: nitro-device
              mountPath: /dev/nitro_enclaves
            {{- end }}
          ports:
            - containerPort: {{ .Values.kmsCore.ports.client }}
              {{- if .Values.kmsCore.hostPort }}
              hostPort: {{ .Values.kmsCore.ports.client }}
              {{- end }}
              protocol: TCP
            {{- if .Values.kmsCore.thresholdMode.enabled }}
            - containerPort: {{ .Values.kmsCore.ports.peer }}
              {{- if .Values.kmsCore.hostPort }}
              hostPort: {{ .Values.kmsCore.ports.peer }}
              {{- end }}
              protocol: TCP
            {{- end }}
            - containerPort: {{ .Values.kmsCore.ports.metrics }}
              {{- if .Values.kmsCore.hostPort }}
              hostPort: {{ .Values.kmsCore.ports.metrics }}
              {{- end }}
              protocol: TCP
          resources:
            requests:
              {{- if .Values.kmsCore.nitroEnclave.enabled }}
              memory: 2Gi
              aws.ec2.nitro/nitro_enclaves: "1"
              hugepages-1Gi: {{ .Values.kmsCore.nitroEnclave.memoryGiB }}Gi
              {{- else }}
              memory: {{ .Values.kmsCore.resources.requests.memory }}
              cpu: {{ .Values.kmsCore.resources.requests.cpu }}
              {{- end }}
            limits:
              ephemeral-storage: {{ .Values.kmsCore.resources.limits.ephemeralStorage }}
              {{- if .Values.kmsCore.nitroEnclave.enabled }}
              memory: 4Gi
              aws.ec2.nitro/nitro_enclaves: "1"
              hugepages-1Gi: {{ .Values.kmsCore.nitroEnclave.memoryGiB }}Gi
              {{- else }}
              memory: {{ .Values.kmsCore.resources.limits.memory }}
              {{- end }}
          readinessProbe:
            grpc:
              port: {{ .Values.kmsCore.ports.client }}
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 5
          startupProbe:
            grpc:
              port: {{ .Values.kmsCore.ports.client }}
            failureThreshold: 10
            initialDelaySeconds: 10
            periodSeconds: 5
          {{- if .Values.kmsCore.nitroEnclave.enabled }}
          lifecycle:
            preStop:
              exec:
                command: [ "nitro-cli", "terminate-enclave", "--all" ]
          {{- end }}
      {{- with .Values.kmsCore.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kmsCore.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kmsCore.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      imagePullSecrets:
        - name: registry-credentials
      volumes:
        - name: workdir
          emptyDir: {}
        - name: config-files
          configMap:
            name: {{ include "kmsCoreName" . }}-config
            defaultMode: 0664
        {{- if .Values.kmsCore.nitroEnclave.enabled }}
        - name: hugepage
          emptyDir:
            medium: HugePages
        - name: nitro-device
          hostPath:
            path: /dev/nitro_enclaves
            type: CharDevice
        {{- end }}
  {{- if not .Values.kmsCore.privateVault.s3.enabled }}
  volumeClaimTemplates:
    - metadata:
        labels:
          app: kms-core
        name: keys
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.kmsCore.storage.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.kmsCore.storage.capacity }}
  {{- end }}
{{- end -}}
